<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--<bean id="auto" class="com.mls.wms.uc.web.shiro.CustomPermissionsAutoFilter"/>-->
    <bean id="customCredentialsMatcher" class="com.mls.wms.uc.web.shiro.CustomCredentialsMatcher">
        <property name="hashAlgorithmName" value="md5"></property>
        <property name="hashIterations" value="12"></property>
        <property name="storedCredentialsHexEncoded" value="true"></property>
    </bean>

    <!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java -->
    <bean id="myRealm" class="com.mls.wms.uc.web.shiro.MyRealm">
        <property name="credentialsMatcher" ref="customCredentialsMatcher"></property>
    </bean>

    <!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->
    <!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->
    <!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="myRealm"/>
    </bean>

    <bean id="initUrlRole" class="com.mls.wms.uc.web.shiro.InitUrlRole"/>
    <bean id="cusPerms" class="com.mls.wms.uc.web.shiro.CustomPermissionsAuthorizationFilter"/>
    <bean id="cusAuthc" class="com.mls.wms.uc.web.shiro.CustomAuthenticationFilter"/>

    <!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
    <!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean" depends-on="cusPerms,cusAuthc">
        <!-- Shiro的核心安全接口,这个属性是必须的 -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
        <!--<property name="loginUrl" value="/jsp"/>-->
        <!-- 登录成功后要跳转的连接(本例中此属性用不到,因为登录成功后的处理逻辑在LoginController里硬编码为main.jsp了) -->
        <!-- <property name="successUrl" value="/system/main"/> -->
        <!-- 用户访问未对其授权的资源时,所显示的连接 -->
        <!-- 若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后用[玄玉]登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp -->
        <!--<property name="unauthorizedUrl" value="/app/a401.html"/>-->
        <!-- Shiro连接约束配置,即过滤链的定义 -->
        <property name="filterChainDefinitions">
            <value>
                /*login*.jsp = anon
                /login = anon
                / = anon
                /unauthorized=anon
                /logout = logout
                /favicon.ico = anon
                /resources/** = user,cusAuthc
                /**/*.css = anon
                /**/*.ico = anon
                /**/*.jpg = anon
                /**/*.png = anon
                /**/*.gif = anon
                /front/** = anon
                /app/bower_components/** = anon
                /index/** = user,cusAuthc
                /**/*.js = user,cusAuthc
            </value>
        </property>
        <property name="filters">
            <map>
                <entry key="cusPerms" value-ref="cusPerms"></entry>
                <entry key="cusAuthc" value-ref="cusAuthc"></entry>
            </map>
        </property>

    </bean>

    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

</beans>